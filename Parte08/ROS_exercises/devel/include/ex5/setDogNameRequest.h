// Generated by gencpp from file ex5/setDogNameRequest.msg
// DO NOT EDIT!


#ifndef EX5_MESSAGE_SETDOGNAMEREQUEST_H
#define EX5_MESSAGE_SETDOGNAMEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ex5
{
template <class ContainerAllocator>
struct setDogNameRequest_
{
  typedef setDogNameRequest_<ContainerAllocator> Type;

  setDogNameRequest_()
    : new_name()  {
    }
  setDogNameRequest_(const ContainerAllocator& _alloc)
    : new_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _new_name_type;
  _new_name_type new_name;





  typedef boost::shared_ptr< ::ex5::setDogNameRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ex5::setDogNameRequest_<ContainerAllocator> const> ConstPtr;

}; // struct setDogNameRequest_

typedef ::ex5::setDogNameRequest_<std::allocator<void> > setDogNameRequest;

typedef boost::shared_ptr< ::ex5::setDogNameRequest > setDogNameRequestPtr;
typedef boost::shared_ptr< ::ex5::setDogNameRequest const> setDogNameRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ex5::setDogNameRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ex5::setDogNameRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ex5::setDogNameRequest_<ContainerAllocator1> & lhs, const ::ex5::setDogNameRequest_<ContainerAllocator2> & rhs)
{
  return lhs.new_name == rhs.new_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ex5::setDogNameRequest_<ContainerAllocator1> & lhs, const ::ex5::setDogNameRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ex5

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ex5::setDogNameRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ex5::setDogNameRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ex5::setDogNameRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ex5::setDogNameRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ex5::setDogNameRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ex5::setDogNameRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ex5::setDogNameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "52e230bdbf0c4867124039d0a6991c49";
  }

  static const char* value(const ::ex5::setDogNameRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x52e230bdbf0c4867ULL;
  static const uint64_t static_value2 = 0x124039d0a6991c49ULL;
};

template<class ContainerAllocator>
struct DataType< ::ex5::setDogNameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ex5/setDogNameRequest";
  }

  static const char* value(const ::ex5::setDogNameRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ex5::setDogNameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string new_name\n"
;
  }

  static const char* value(const ::ex5::setDogNameRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ex5::setDogNameRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.new_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct setDogNameRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ex5::setDogNameRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ex5::setDogNameRequest_<ContainerAllocator>& v)
  {
    s << indent << "new_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.new_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EX5_MESSAGE_SETDOGNAMEREQUEST_H
