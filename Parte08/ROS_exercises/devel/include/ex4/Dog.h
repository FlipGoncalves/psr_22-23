// Generated by gencpp from file ex4/Dog.msg
// DO NOT EDIT!


#ifndef EX4_MESSAGE_DOG_H
#define EX4_MESSAGE_DOG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ex4
{
template <class ContainerAllocator>
struct Dog_
{
  typedef Dog_<ContainerAllocator> Type;

  Dog_()
    : name()
    , age(0)
    , color()
    , brothers()  {
    }
  Dog_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , age(0)
    , color(_alloc)
    , brothers(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint8_t _age_type;
  _age_type age;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _color_type;
  _color_type color;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _brothers_type;
  _brothers_type brothers;





  typedef boost::shared_ptr< ::ex4::Dog_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ex4::Dog_<ContainerAllocator> const> ConstPtr;

}; // struct Dog_

typedef ::ex4::Dog_<std::allocator<void> > Dog;

typedef boost::shared_ptr< ::ex4::Dog > DogPtr;
typedef boost::shared_ptr< ::ex4::Dog const> DogConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ex4::Dog_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ex4::Dog_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ex4::Dog_<ContainerAllocator1> & lhs, const ::ex4::Dog_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.age == rhs.age &&
    lhs.color == rhs.color &&
    lhs.brothers == rhs.brothers;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ex4::Dog_<ContainerAllocator1> & lhs, const ::ex4::Dog_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ex4

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ex4::Dog_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ex4::Dog_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ex4::Dog_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ex4::Dog_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ex4::Dog_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ex4::Dog_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ex4::Dog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3077797aba907ebe79e21a78f227ffd1";
  }

  static const char* value(const ::ex4::Dog_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3077797aba907ebeULL;
  static const uint64_t static_value2 = 0x79e21a78f227ffd1ULL;
};

template<class ContainerAllocator>
struct DataType< ::ex4::Dog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ex4/Dog";
  }

  static const char* value(const ::ex4::Dog_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ex4::Dog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"uint8 age\n"
"string color\n"
"string[] brothers\n"
;
  }

  static const char* value(const ::ex4::Dog_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ex4::Dog_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.age);
      stream.next(m.color);
      stream.next(m.brothers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Dog_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ex4::Dog_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ex4::Dog_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "age: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.age);
    s << indent << "color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.color);
    s << indent << "brothers[]" << std::endl;
    for (size_t i = 0; i < v.brothers.size(); ++i)
    {
      s << indent << "  brothers[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.brothers[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // EX4_MESSAGE_DOG_H
